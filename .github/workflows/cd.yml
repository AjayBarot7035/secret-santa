name: CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

jobs:
  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push CSV Parser image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: secret-santa-csv-parser
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./secret-santa-microservices/csv-parser-service
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./secret-santa-microservices/csv-parser-service
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Build, tag, and push Assignment Service image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: secret-santa-assignment-service
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./secret-santa-microservices/assignment-service
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./secret-santa-microservices/assignment-service
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Build, tag, and push API Gateway image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: secret-santa-api-gateway
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./secret-santa-microservices/api-gateway
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./secret-santa-microservices/api-gateway
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-push-images
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.5.0"
        
    - name: Terraform Init
      working-directory: ./secret-santa-microservices/infrastructure/aws
      run: terraform init
      
    - name: Terraform Plan
      working-directory: ./secret-santa-microservices/infrastructure/aws
      run: terraform plan -out=tfplan
      
    - name: Terraform Apply
      working-directory: ./secret-santa-microservices/infrastructure/aws
      run: terraform apply -auto-approve tfplan
      
    - name: Update ECS Services
      run: |
        # Update CSV Parser Service
        aws ecs update-service \
          --cluster secret-santa-cluster \
          --service secret-santa-csv-parser \
          --force-new-deployment
          
        # Update Assignment Service
        aws ecs update-service \
          --cluster secret-santa-cluster \
          --service secret-santa-assignment-service \
          --force-new-deployment
          
        # Update API Gateway Service
        aws ecs update-service \
          --cluster secret-santa-cluster \
          --service secret-santa-api-gateway \
          --force-new-deployment

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Get ALB DNS name
      id: get-alb-dns
      run: |
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names secret-santa-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
        echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT
        
    - name: Wait for services to be ready
      run: |
        sleep 120  # Wait for ECS services to start
        
    - name: Health check API Gateway
      run: |
        curl -f http://$\{\{ steps.get-alb-dns.outputs.alb_dns }}/api/v1/secret_santa/health || exit 1
        
    - name: Test Secret Santa API
      run: |
        # Test the complete flow
        curl -X POST http://$\{\{ steps.get-alb-dns.outputs.alb_dns }}/api/v1/secret_santa/generate_assignments \
          -H "Content-Type: application/json" \
          -d '{"employees": [{"name": "John Doe", "email": "john@example.com"}, {"name": "Jane Smith", "email": "jane@example.com"}]}' || exit 1
